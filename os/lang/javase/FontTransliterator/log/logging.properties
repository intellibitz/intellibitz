############################################################
############################################################
# <!--
# /# #
#  Copyright (C) IntelliBitz Technologies.,  Muthu Ramadoss
#  168, Medavakkam Main Road, Madipakkam, Chennai 600091, Tamilnadu, India.
#  http://www.intellibitz.com
#  training@intellibitz.com
#  +91 44 2247 5106
# http://groups.google.com/group/etoe
# http://sted.sourceforge.net
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  STED, Copyright (C) 2007 IntelliBitz Technologies
#  STED comes with ABSOLUTELY NO WARRANTY;
#  This is free software, and you are welcome
#  to redistribute it under the GNU GPL conditions;
#
#  Visit http://www.gnu.org/ for GPL License terms.
# /
#-->
#<!--
# #
#  $Id:logging.properties 55 2007-05-19 05:55:34Z sushmu $
#  $HeadURL: svn+ssh://sushmu@svn.code.sf.net/p/sted/code/FontTransliterator/trunk/log/logging.properties $
# /
#-->
############################################################
############################################################
############################################################
# STED - LOGGING CONFIGURATION
############################################################
#
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################
############################################################
#  	Global properties
############################################################
# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
# To also add the FileHandler, use the following line instead.
handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler
# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# Enabling logging at a given level also enables logging at all higher levels.
#
# Clients should normally use the predefined Level constants such as Level.SEVERE.
# The levels in descending order are:
# SEVERE (highest value)
# WARNING
# INFO
# CONFIG
# FINE
# FINER
# FINEST (lowest value)
# there is a level OFF to turn off logging, and a level ALL to enable logging of all messages.
.level=INFO
# default file output is in user's home directory.
# java.util.logging.FileHandler.level specifies the default level for the Handler (defaults to Level.ALL).
# java.util.logging.FileHandler.filter specifies the name of a Filter class to use (defaults to no Filter).
# java.util.logging.FileHandler.formatter specifies the name of a Formatter class to use (defaults to java.util.logging.XMLFormatter)
# java.util.logging.FileHandler.encoding the name of the character set encoding to use (defaults to the default platform encoding).
# java.util.logging.FileHandler.limit specifies an approximate maximum amount to write (in bytes) to any one file.
#                                       If this is zero, then there is no limit. (Defaults to no limit).
# java.util.logging.FileHandler.count specifies how many output files to cycle through (defaults to 1).
# java.util.logging.FileHandler.pattern specifies a pattern for generating the output file name. See below for details. (Defaults to "%h/java%u.log").
# java.util.logging.FileHandler.append specifies whether the FileHandler should append onto any existing files (defaults to false).
java.util.logging.FileHandler.pattern=./log/sted.log.xml
############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################
# For example, set the com.xyz.foo logger to only log SEVERE messages:
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
