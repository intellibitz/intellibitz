/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */
//A build script is made up of zero or more statements and script blocks:
//Statements can include method calls, property assignments, and local variable definitions:
group = "org.app"
version = "1.0-SNAPSHOT"

//1.	Apply plugins to the build.
plugins {
    alias(libs.plugins.kotlin.jvm) apply true
//    id("org.jetbrains.kotlin.jvm") version "2.0.20"
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("maven-publish")
}
//2. Define the locations where dependencies can be found.
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()
}
//3. Add dependencies.
dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    // Use JUnit test framework.
//    testImplementation(libs.junit)
    testImplementation(libs.junit.jupiter)
//    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}
//4. Set properties.
// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
kotlin {
    jvmToolchain(21)
}
application {
    // Define the main class for the application.
//    mainClass = "org.example.App"
    mainClass = "$group.App"
}
//5. Register and configure tasks.
tasks.named<Test>("test") {
    useJUnitPlatform()
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            groupId = "org.app.tutorial"
            artifactId = "tutorial"
            version = "1.0"

            from(components["java"])
        }
    }
}

tasks.register("hello") {
    doLast {
        println("Hello!")
    }
}

tasks.register("greet") {
    doLast {
        println("How are you?")
    }
    dependsOn("hello")
}

tasks.register<Copy>("copyTask") {
    from("source")
    into("target")
    include("*.war")
}

